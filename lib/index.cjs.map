{"version":3,"file":"index.cjs","sources":["../src/types.ts","../src/utils.ts","../src/hooks/useDefaultRenderers.ts","../src/hooks/useCalculatedColumns.ts","../src/hooks/useMergeRefs.ts","../src/hooks/useViewportRows.ts","../src/hooks/useSelectedRows.ts","../src/hooks/useColumnResize.ts","../src/hooks/useHeaderHeight.ts","../src/hooks/useFocusContainer.ts","../src/hooks/useRowSort.ts","../src/hooks/useRowKey.ts","../src/Icon.tsx","../src/ListViewHeaderCell.tsx","../src/ListViewHeaderRow.tsx","../src/ListViewCell.tsx","../src/ListViewRow.tsx","../src/ListView.tsx"],"sourcesContent":["import { ListViewHeaderCellContainerProps, ListViewHeaderRowProps } from './ListViewHeaderRow';\nimport { ListViewHeaderCellProps, SortStatusProps } from './ListViewHeaderCell';\nimport { ListViewCellContainerProps, ListViewRowProps } from './ListViewRow';\nimport { ListViewCellProps } from './ListViewCell';\nimport { ListViewRowContainerProps } from './ListView';\n\nexport const cssClassnames = {\n  listView: 'relv',\n  listViewHeader: 'relv__header',\n  listViewHeaderRow: 'relv__header-row',\n  listViewSortStatus: 'relv__sort-status',\n  listViewResizeHandle: 'relv__resize-handle',\n  listViewBody: 'relv__body',\n  listViewRow: 'relv__row',\n  listViewRowSelected: 'relv__row--selected',\n  listViewRowFocused: 'relv__row--focused',\n  listViewCell: 'relv__cell',\n};\n\nexport type Renderer<P> = (props: P) => React.ReactNode;\nexport type RendererWithKey<P> = (key: React.Key, props: P) => React.ReactNode;\n\nexport interface Column<R> {\n  key: string;\n  name: string;\n  width?: number;\n  order?: number;\n  visible?: boolean;\n  minWidth?: number;\n  maxWidth?: number;\n  preferredWidth?: number;\n  sortable?: boolean;\n  resizable?: boolean;\n  cellClass?: string | ((row: R) => string | undefined);\n  headerCellClass?: string;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  valueGetter?: (row: R, column: Column<R>) => any;\n  comparator?: Comparator<R>;\n  renderer?: Renderer<CellRendererProps<R>>;\n  headerRenderer?: Renderer<HeaderCellRendererProps<R>>;\n}\n\nexport interface CalculatedColumn<R> extends Column<R> {\n  readonly index: number;\n  readonly order: number;\n  readonly width: number;\n  readonly minWidth: number;\n  readonly maxWidth: number | undefined;\n  readonly preferredWidth: number;\n  readonly resizable: boolean;\n  readonly sortable: boolean;\n}\n\nexport type DefaultColumnOptions<R> = Omit<Column<R>, 'key' | 'name' | 'order'>;\n\nexport type Comparator<R> = (a: R, b: R) => number;\n\nexport type SortDirection = 'ASC' | 'DESC';\n\nexport interface SortColumn {\n  readonly columnKey: string;\n  readonly direction: SortDirection;\n}\n\nexport type CellRendererProps<R> = {\n  column: CalculatedColumn<R>;\n  row: R;\n  rowFocused?: boolean;\n  rowSelected?: boolean;\n};\n\nexport type HeaderCellRendererProps<R> = {\n  column: CalculatedColumn<R>;\n};\n\nexport interface ListViewHandle {\n  element: HTMLDivElement | null;\n  scrollToRow: (rowIndex: number) => void;\n}\n\nexport type RowKey<R, K> = ((row: R) => K) | (keyof R & string);\n\nexport type ListViewProps<R, K extends React.Key = React.Key> = {\n  columns: readonly Column<R>[];\n  rows: readonly R[];\n  rowKey: RowKey<R, K>;\n  rowHeight?: number;\n  noBorder?: boolean;\n  defaultColumnOptions?: DefaultColumnOptions<R>;\n  focusedRow?: K;\n  onFocusedRowChange?: (focusedRow: K | undefined) => void;\n  selectedRows?: K[];\n  onSelectedRowsChange?: (selectedRows: K[]) => void;\n  sortColumn?: SortColumn;\n  onSortColumnChange?: (sortColumn?: SortColumn) => void;\n  onColumnResize?: (column: CalculatedColumn<R>, width: number) => void;\n  onRowClick?: (event: React.MouseEvent, row: R) => void;\n  onRowDoubleClick?: (event: React.MouseEvent, row: R) => void;\n  onRowContextMenu?: (event: React.MouseEvent, row: R) => void;\n  onRowDragStart?: (event: React.DragEvent, row: R) => void;\n} & React.HTMLAttributes<HTMLDivElement>;\n\nexport interface DefaultRenderers<R> {\n  headerRow?: Renderer<ListViewHeaderRowProps<R>>;\n  headerCellContainer?: Renderer<ListViewHeaderCellContainerProps<R>>;\n  headerCell?: RendererWithKey<ListViewHeaderCellProps<R>>;\n  rowContainer?: Renderer<ListViewRowContainerProps<R>>;\n  row?: RendererWithKey<ListViewRowProps<R>>;\n  cellContainer?: Renderer<ListViewCellContainerProps<R>>;\n  cell?: RendererWithKey<ListViewCellProps<R>>;\n  sortStatus?: Renderer<SortStatusProps>;\n  noRowsFallback?: React.ReactNode;\n}\n","import { Column, Comparator } from './types';\n\nexport function range(from: number, to: number) {\n  return Array.from({ length: Math.abs(from - to) + 1 }, (v, k) => Math.min(from, to) + k);\n}\n\nexport function sortBy<T>(elements: T[], key: keyof T) {\n  return [...elements].sort((a, b) => {\n    return a[key] === b[key] ? 0 : a[key] > b[key] ? 1 : -1;\n  });\n}\n\nexport function reorder<R>(\n  columns: readonly Column<R>[],\n  picked: Column<R>['key'],\n  over: Column<R>['key']\n): Column<R>[] {\n  const tmp = sortBy(\n    columns.map(({ key, order }, index) => ({ key, order, index })),\n    'order'\n  );\n  const oldPos = tmp.findIndex((x) => x.key == picked);\n  const newPos = tmp.findIndex((x) => x.key == over);\n  tmp.splice(newPos < 0 ? tmp.length + newPos : newPos, 0, tmp.splice(oldPos, 1)[0]);\n  const newOrder = new Map(tmp.map((x, i) => [x.index, i]));\n  return columns.map((x, i) => ({ ...x, order: newOrder.get(i) }));\n}\n\nexport function getDefaultComparator<R>(column: Column<R>): Comparator<R> {\n  const { key, valueGetter = (row) => row[key as keyof R] } = column;\n  return (a, b) => {\n    const value1 = valueGetter(a, column);\n    const value2 = valueGetter(b, column);\n    if (value1 !== undefined && value2 === undefined) {\n      return 1;\n    } else if (value1 === undefined && value2 !== undefined) {\n      return -1;\n    } else {\n      return value1 === value2 ? 0 : value1 > value2 ? 1 : -1;\n    }\n  };\n}\n","import { createContext, useContext } from 'react';\nimport { DefaultRenderers } from '../types';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst Context = createContext<DefaultRenderers<any>>({});\n\nexport const DefaultRenderersProvider = Context.Provider;\n\nexport function useDefaultRenderers<R>(): DefaultRenderers<R> {\n  return useContext<DefaultRenderers<R>>(Context);\n}\n","import { useLayoutEffect, useMemo } from 'react';\nimport { useMap } from 'react-use';\nimport { CalculatedColumn, Column, DefaultColumnOptions } from '../types';\nimport { sortBy } from '../utils';\n\nexport function useCalculatedColumns<R>(\n  rawColumns: readonly Column<R>[],\n  defaultColumnOptions?: DefaultColumnOptions<R>\n) {\n  const {\n    width = 100,\n    minWidth = 80,\n    maxWidth,\n    preferredWidth,\n    sortable = false,\n    resizable = false,\n    cellClass,\n    headerCellClass,\n    valueGetter,\n    comparator,\n    renderer,\n    headerRenderer,\n  } = defaultColumnOptions || {};\n\n  const columns = useMemo(() => {\n    const calculatedColumns: CalculatedColumn<R>[] = [];\n    for (let i = 0; i < rawColumns.length; i++) {\n      const col = rawColumns[i];\n      if (col.visible ?? true) {\n        calculatedColumns.push({\n          ...col,\n          index: i,\n          order: col.order ?? i,\n          width: col.width ?? width,\n          minWidth: col.minWidth ?? minWidth,\n          maxWidth: col.maxWidth ?? maxWidth,\n          preferredWidth: col.preferredWidth ?? preferredWidth ?? col.width ?? width,\n          sortable: col.sortable ?? sortable,\n          resizable: col.resizable ?? resizable,\n          cellClass: col.cellClass ?? cellClass,\n          headerCellClass: col.headerCellClass ?? headerCellClass,\n          valueGetter: col.valueGetter ?? valueGetter,\n          comparator: col.comparator ?? comparator,\n          renderer: col.renderer ?? renderer,\n          headerRenderer: col.headerRenderer ?? headerRenderer,\n        });\n      }\n    }\n    return sortBy(calculatedColumns, 'order');\n  }, [\n    rawColumns,\n    width,\n    minWidth,\n    maxWidth,\n    preferredWidth,\n    sortable,\n    resizable,\n    cellClass,\n    headerCellClass,\n    valueGetter,\n    comparator,\n    renderer,\n    headerRenderer,\n  ]);\n\n  const [\n    columnWidths,\n    { set: setColumnWidths, setAll: setColumnWidthsAll, reset: resetColumnWidths },\n  ] = useMap(Object.fromEntries(columns.map(({ key, width }) => [key, width])));\n\n  const gridTemplateColumns = useMemo<string>(\n    () => columns.map((col) => columnWidths[col.key] + 'px').join(' '),\n    [columns, columnWidths]\n  );\n\n  useLayoutEffect(\n    () => setColumnWidthsAll(Object.fromEntries(columns.map(({ key, width }) => [key, width]))),\n    [columns, setColumnWidthsAll]\n  );\n\n  return {\n    columns,\n    columnWidths,\n    setColumnWidths,\n    setColumnWidthsAll,\n    resetColumnWidths,\n    gridTemplateColumns,\n  };\n}\n","/**\n * useMergeRefs\n * \n * Copyright (c) 2018 react-hooks-org\n * Released under the MIT license\n * https://github.com/imbhargav5/rooks/blob/main/LICENSE\n */\nimport { MutableRefObject, Ref, RefCallback, useMemo } from 'react';\nexport type PossibleRef<T> = Ref<T> | undefined;\n\nfunction setRef<T>(ref: PossibleRef<T>, value: T) {\n  if (typeof ref === 'function') {\n    ref(value);\n  } else if (ref !== null && ref !== undefined) {\n    (ref as MutableRefObject<T>).current = value;\n  }\n}\n\nexport function useMergeRefs<T>(...refs: Array<PossibleRef<T>>): RefCallback<T> | null {\n  return useMemo(() => {\n    if (refs.every((ref) => ref === null)) {\n      return null;\n    }\n\n    return (refValue: T) => {\n      for (const ref of refs) {\n        setRef<T>(ref, refValue);\n      }\n    };\n  }, [refs]);\n}\n","import { RefObject, useMemo } from 'react';\nimport { useMeasure, useScroll } from 'react-use';\nimport { useMergeRefs } from './useMergeRefs';\nimport { range } from '../utils';\n\nexport function useViewportRows<R, E extends HTMLElement>(\n  ref: RefObject<E>,\n  rows: readonly R[],\n  rowHeight: number,\n  headerHeight: number,\n  focusedRowIndex: number\n): [\n  refs: ReturnType<typeof useMergeRefs<E>>,\n  viewportHeight: number,\n  viewportRows: number[]\n] {\n  const { y: scrollTop } = useScroll(ref);\n  const [measureRef, { height: clientHeight }] = useMeasure<E>();\n  const refs = useMergeRefs(ref, measureRef);\n  const viewportHeight = clientHeight - headerHeight;\n\n  const viewportRows = useMemo(() => {\n    if (rows.length == 0) return [];\n    const findRowIdx = (offset: number) => Math.floor(offset / rowHeight);\n    const overscanThreshold = 4;\n    const viewportTopIndex = findRowIdx(scrollTop);\n    const viewportBottomIndex = findRowIdx(scrollTop + viewportHeight);\n    const viewportRowsCount = Math.min(rows.length, viewportBottomIndex - viewportTopIndex + 1);\n    const overscanBottomIndex = Math.min(rows.length - 1, viewportBottomIndex + overscanThreshold);\n    const overscanTopIndex = Math.max(\n      0,\n      overscanBottomIndex - viewportRowsCount - overscanThreshold\n    );\n    return Array.from(\n      new Set(\n        range(overscanTopIndex, overscanBottomIndex).concat([Math.max(0, focusedRowIndex)])\n      ).values()\n    ).sort();\n  }, [rows, rowHeight, scrollTop, focusedRowIndex, viewportHeight]);\n\n  return [refs, viewportHeight, viewportRows];\n}\n","import { useCallback, useLayoutEffect, useState } from 'react';\n\nexport function useSelectedRows<K extends React.Key>(\n  propSelectedRows?: K[]\n): [rows: K[], set: (rows: K[], merge?: boolean) => void] {\n  const [rows, set] = useState<K[]>(propSelectedRows ?? []);\n\n  useLayoutEffect(() => set(propSelectedRows ?? []), [propSelectedRows]);\n\n  const merge = useCallback(\n    (selected: K[], merge = false) => {\n      set((rows) => (merge ? Array.from(new Set([...rows, ...selected])) : selected));\n    },\n    [set]\n  );\n\n  return [rows, merge];\n}\n","import {\n  createContext,\n  MouseEventHandler,\n  PointerEventHandler,\n  RefObject,\n  useCallback,\n  useContext,\n  useRef,\n} from 'react';\nimport type { CalculatedColumn } from '../types';\n\nexport type ColumnResizeContext<R> = {\n  onColumnResize?: (column: CalculatedColumn<R>, width: number) => void;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst Context = createContext<ColumnResizeContext<any>>({});\n\nexport const ColumnResizeProvider = Context.Provider;\n\nexport function useColumnResize<R, Parent extends HTMLElement, Handle extends HTMLElement>(\n  column: CalculatedColumn<R>\n): [\n  refTarget: RefObject<Parent>,\n  onPointerDown: PointerEventHandler<Handle>,\n  onDoubleClick: MouseEventHandler<Handle>\n] {\n  const { onColumnResize } = useContext(Context);\n  const refTarget = useRef<Parent>(null);\n\n  const handlePointerDown = useCallback(\n    (event: React.PointerEvent<Handle>) => {\n      if (\n        !column.resizable ||\n        (event.pointerType === 'mouse' && event.buttons !== 1) ||\n        refTarget.current == null\n      ) {\n        return;\n      }\n      event.stopPropagation();\n\n      const { currentTarget, pointerId } = event;\n      const { right } = currentTarget.getBoundingClientRect();\n      const offset = right - event.clientX;\n\n      function getPreferredWidth<R>(column: CalculatedColumn<R>, width: number) {\n        return Math.round(\n          Math.max(Math.min(width, column.maxWidth ?? width), column.minWidth ?? width)\n        );\n      }\n\n      function onPointerMove(ev: PointerEvent) {\n        if (!refTarget.current) return;\n        const { left } = refTarget.current.getBoundingClientRect();\n        const width = ev.clientX + offset - left;\n        if (width > 0) {\n          onColumnResize?.(column, getPreferredWidth(column, width));\n        }\n      }\n\n      function onLostPointerCapture() {\n        currentTarget.releasePointerCapture(pointerId);\n        currentTarget.removeEventListener('pointermove', onPointerMove);\n        currentTarget.removeEventListener('lostpointercapture', onLostPointerCapture);\n      }\n\n      currentTarget.setPointerCapture(pointerId);\n      currentTarget.addEventListener('pointermove', onPointerMove);\n      currentTarget.addEventListener('lostpointercapture', onLostPointerCapture);\n    },\n    [column, onColumnResize]\n  );\n\n  const handleDoubleClick = useCallback(() => {\n    if (!column.resizable) {\n      return;\n    }\n    onColumnResize?.(column, column.preferredWidth);\n  }, [column, onColumnResize]);\n\n  return [refTarget, handlePointerDown, handleDoubleClick];\n}\n","import { createContext, useContext, useLayoutEffect } from 'react';\nimport { useMeasure } from 'react-use';\n\nexport type HeaderHeightContext = {\n  onHeaderHeightResize?: (height: number) => void;\n};\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst Context = createContext<HeaderHeightContext>({});\n\nexport const HeaderHeightProvider = Context.Provider;\n\nexport function useHeaderHeight<E extends HTMLElement>() {\n  const { onHeaderHeightResize } = useContext(Context);\n  const [ref, { height }] = useMeasure<E>();\n  useLayoutEffect(() => {\n    onHeaderHeightResize?.(height);\n  }, [height, onHeaderHeightResize]);\n  return ref;\n}\n","import { createContext, useContext } from 'react';\n\nconst Context = createContext<HTMLElement | null>(null);\n\nexport const FocusContainerProvider = Context.Provider;\n\nexport function useFocusContainer() {\n  return useContext(Context);\n}\n","import { createContext, useContext } from 'react';\nimport { SortColumn } from '../types';\n\nexport type RowSortContext = {\n  sortColumn?: SortColumn;\n  onSort?: (sortColumn?: SortColumn) => void;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nconst Context = createContext<RowSortContext>({});\n\nexport const RowSortProvider = Context.Provider;\n\nexport function useRowSort(): RowSortContext {\n  return useContext(Context);\n}\n","import { Key, useCallback, useMemo } from 'react';\nimport { RowKey } from '../types';\n\nexport function useRowKey<R, K extends Key = Key>(rows: readonly R[], rowKey: RowKey<R, K>) {\n  const getByRow = useCallback(\n    (row: R) => {\n      if (typeof rowKey === 'function') {\n        return rowKey(row);\n      } else {\n        return row[rowKey] as K;\n      }\n    },\n    [rowKey]\n  );\n  const getIndexByKey = useMemo(() => {\n    const map = new Map(rows.map((row, rowIndex) => [getByRow(row), rowIndex]));\n    return (key: K | undefined) => (key === undefined ? undefined : map.get(key));\n  }, [rows, getByRow]);\n  return { getByRow, getIndexByKey };\n}\n","interface TriangleProps extends React.SVGAttributes<SVGElement> {\n  dir: 'up' | 'down' | 'left' | 'right';\n}\n\nexport function Triangle({ dir, fill = 'currentColor', ...props }: TriangleProps) {\n  return (\n    <svg viewBox=\"0 0 8 8\" fill={fill} {...props}>\n      {dir === 'up' && <path d=\"M0 0h8l-4,4z\" transform=\"translate(0,6) scale(1 -1)\" />}\n      {dir === 'down' && <path d=\"M0 0h8l-4,4z\" transform=\"translate(0,2)\" />}\n      {dir === 'left' && <path d=\"M0 0v8l4,-4z\" transform=\"translate(6,0) scale(-1 1)\" />}\n      {dir === 'right' && <path d=\"M0 0v8l4,-4z\" transform=\"translate(2,0)\" />}\n    </svg>\n  );\n}\n\ninterface ChevronProps extends Omit<React.SVGAttributes<SVGElement>, 'xmlns'> {\n  dir: 'up' | 'down';\n}\n\nexport function Chevron({ dir, stroke = 'currentColor', ...props }: ChevronProps) {\n  return (\n    <svg viewBox=\"0 0 24 24\" fill=\"none\" stroke={stroke} {...props}>\n      {dir === 'up' && <polyline points=\"6 15 12 9 18 15\" />}\n      {dir === 'down' && <polyline points=\"6 9 12 15 18 9\" />}\n    </svg>\n  );\n}\n","import { forwardRef, memo, RefAttributes, useCallback } from 'react';\nimport { CalculatedColumn, cssClassnames, SortDirection } from './types';\nimport { useDefaultRenderers } from './hooks/useDefaultRenderers';\nimport { useColumnResize } from './hooks/useColumnResize';\nimport { useRowSort } from './hooks/useRowSort';\nimport { useMergeRefs } from './hooks/useMergeRefs';\nimport { Chevron } from './Icon';\nimport clsx from 'clsx';\n\nexport type ListViewHeaderCellProps<R> = {\n  column: CalculatedColumn<R>;\n} & React.HTMLAttributes<HTMLDivElement>;\n\nfunction HeaderCell<R>(\n  { column, className, children, ...props }: ListViewHeaderCellProps<R>,\n  ref?: React.Ref<HTMLDivElement>\n) {\n  const { headerCellClass, headerRenderer = () => column.name } = column;\n  const [refTarget, handlePointerDown, handleDoubleClick] = useColumnResize(column);\n  const refs = useMergeRefs(ref, refTarget);\n  return (\n    <div\n      ref={refs}\n      role=\"columnheader\"\n      aria-colindex={column.index + 1} // aria-colindex is 1 based\n      className={clsx(cssClassnames.listViewCell, className, headerCellClass)}\n      {...props}\n    >\n      {children ? children : headerRenderer({ column })}\n      {column.resizable && (\n        <div\n          className={cssClassnames.listViewResizeHandle}\n          onPointerDown={handlePointerDown}\n          onDoubleClick={handleDoubleClick}\n        ></div>\n      )}\n    </div>\n  );\n}\n\nexport const ListViewHeaderCell = memo(forwardRef(HeaderCell)) as <R>(\n  props: ListViewHeaderCellProps<R> & RefAttributes<HTMLDivElement>\n) => JSX.Element;\n\nfunction SortableHeaderCell<R>(\n  { column, children, ...props }: ListViewHeaderCellProps<R>,\n  ref?: React.Ref<HTMLDivElement>\n) {\n  const { headerRenderer = () => column.name } = column;\n  const sortStatus = useDefaultRenderers<R>().sortStatus ?? SortStatus;\n  const { sortColumn, onSort } = useRowSort();\n  const sortDirection =\n    sortColumn && sortColumn.columnKey === column.key ? sortColumn.direction : undefined;\n  const handleClick = useCallback(\n    (event: React.MouseEvent) => {\n      if (event.currentTarget !== event.target) return;\n      onSort?.(\n        sortDirection === undefined\n          ? { columnKey: column.key, direction: 'ASC' }\n          : sortDirection === 'ASC'\n          ? { columnKey: column.key, direction: 'DESC' }\n          : undefined\n      );\n    },\n    [column, sortDirection, onSort]\n  );\n  return (\n    <ListViewHeaderCell\n      ref={ref}\n      column={column}\n      aria-sort={sortDirection ? (sortDirection === 'ASC' ? 'ascending' : 'descending') : undefined}\n      {...props}\n    >\n      <div onClick={column.sortable ? handleClick : undefined}>\n        {children ? children : headerRenderer({ column })}\n      </div>\n      {column.sortable && sortStatus({ sortDirection })}\n    </ListViewHeaderCell>\n  );\n}\n\nexport const ListViewSortableHeaderCell = memo(forwardRef(SortableHeaderCell)) as <R>(\n  props: ListViewHeaderCellProps<R> & RefAttributes<HTMLDivElement>\n) => JSX.Element;\n\nexport function defaultHeaderCellRenderer<R>(key: React.Key, props: ListViewHeaderCellProps<R>) {\n  return <ListViewSortableHeaderCell key={key} {...props} />;\n}\n\nexport interface SortStatusProps {\n  sortDirection: SortDirection | undefined;\n}\n\nexport function SortStatus({ sortDirection }: SortStatusProps) {\n  return sortDirection === undefined ? null : (\n    <Chevron\n      className={cssClassnames.listViewSortStatus}\n      dir={sortDirection === 'ASC' ? 'up' : 'down'}\n    />\n  );\n}\n","import { forwardRef, memo, RefAttributes } from 'react';\nimport { useDefaultRenderers } from './hooks/useDefaultRenderers';\nimport { useHeaderHeight } from './hooks/useHeaderHeight';\nimport { useMergeRefs } from './hooks/useMergeRefs';\nimport { defaultHeaderCellRenderer } from './ListViewHeaderCell';\nimport { CalculatedColumn, cssClassnames } from './types';\nimport clsx from 'clsx';\n\nexport type ListViewHeaderRowProps<R> = {\n  columns: CalculatedColumn<R>[];\n} & React.HTMLAttributes<HTMLDivElement>;\n\nfunction HeaderRow<R>(\n  { columns, className, ...props }: ListViewHeaderRowProps<R>,\n  ref?: React.Ref<HTMLDivElement>\n) {\n  const measureRef = useHeaderHeight();\n  const refs = useMergeRefs(ref, measureRef);\n  const renderers = useDefaultRenderers<R>();\n  const headerCell = renderers.headerCell ?? defaultHeaderCellRenderer;\n  const headerCellContainer = renderers.headerCellContainer ?? defaultHeaderCellContainer;\n  return (\n    <div\n      ref={refs}\n      role=\"row\"\n      aria-rowindex={1} // aria-rowindex is 1 based\n      className={clsx(cssClassnames.listViewHeaderRow, className)}\n      {...props}\n    >\n      {headerCellContainer({\n        columns,\n        children: columns.map((column) => headerCell?.(column.key, { column })),\n      })}\n    </div>\n  );\n}\n\nexport const ListViewHeaderRow = memo(forwardRef(HeaderRow)) as <R>(\n  props: ListViewHeaderRowProps<R> & RefAttributes<HTMLDivElement>\n) => JSX.Element;\n\nexport function defaultHeaderRowRenderer<R>(props: ListViewHeaderRowProps<R>) {\n  return <ListViewHeaderRow {...props} />;\n}\n\nexport type ListViewHeaderCellContainerProps<R> = React.PropsWithChildren<{\n  columns: CalculatedColumn<R>[];\n}>;\n\nfunction defaultHeaderCellContainer<R>({ children }: ListViewHeaderCellContainerProps<R>) {\n  return <>{children}</>;\n}\n","import { forwardRef, memo, RefAttributes } from 'react';\nimport { CellRendererProps, cssClassnames, CalculatedColumn } from './types';\nimport clsx from 'clsx';\n\nexport type ListViewCellProps<R> = {\n  column: CalculatedColumn<R>;\n  row: R;\n  rowFocused?: boolean;\n  rowSelected?: boolean;\n} & React.HTMLAttributes<HTMLDivElement>;\n\nfunction Cell<R>(\n  { column, row, rowFocused, rowSelected, className, ...props }: ListViewCellProps<R>,\n  ref?: React.Ref<HTMLDivElement>\n) {\n  const { cellClass, renderer = defaultRenderer } = column;\n  return (\n    <div\n      ref={ref}\n      role=\"cell\"\n      className={clsx(\n        cssClassnames.listViewCell,\n        className,\n        typeof cellClass === 'function' ? cellClass(row) : cellClass\n      )}\n      {...props}\n    >\n      {renderer({ column, row, rowFocused, rowSelected })}\n    </div>\n  );\n}\n\nexport const ListViewCell = memo(forwardRef(Cell)) as <R>(\n  props: ListViewCellProps<R> & RefAttributes<HTMLDivElement>\n) => JSX.Element;\n\nexport function defaultCellRenderer<R>(key: React.Key, props: ListViewCellProps<R>) {\n  return <ListViewCell key={key} {...props} />;\n}\n\nfunction defaultRenderer<R>({ column, row }: CellRendererProps<R>) {\n  const { key, valueGetter = (row) => row[key as keyof R] } = column;\n  return <>{valueGetter(row, column)}</>;\n}\n","import { forwardRef, memo, RefAttributes, useLayoutEffect, useRef } from 'react';\nimport { useDefaultRenderers } from './hooks/useDefaultRenderers';\nimport { useFocusContainer } from './hooks/useFocusContainer';\nimport { useMergeRefs } from './hooks/useMergeRefs';\nimport { defaultCellRenderer } from './ListViewCell';\nimport { CalculatedColumn, cssClassnames } from './types';\nimport { clsx } from 'clsx';\n\nexport type ListViewRowProps<R> = {\n  columns: CalculatedColumn<R>[];\n  row: R;\n  rowIndex: number;\n  gridRowStart: number;\n  canTabFocus?: boolean;\n  shouldFocus?: boolean;\n  selected?: boolean;\n  onRowFocus?: (event: React.FocusEvent, row: R) => void;\n  onRowMouseDown?: (event: React.MouseEvent, row: R) => void;\n  onRowMouseUp?: (event: React.MouseEvent, row: R) => void;\n  onRowClick?: (event: React.MouseEvent, row: R) => void;\n  onRowDoubleClick?: (event: React.MouseEvent, row: R) => void;\n  onRowContextMenu?: (event: React.MouseEvent, row: R) => void;\n  onRowDragStart?: (event: React.DragEvent, row: R) => void;\n} & React.HTMLAttributes<HTMLDivElement>;\n\nfunction Row<R>(\n  {\n    columns,\n    row,\n    rowIndex,\n    gridRowStart,\n    canTabFocus,\n    shouldFocus,\n    selected,\n    onRowFocus,\n    onRowMouseDown,\n    onRowMouseUp,\n    onRowClick,\n    onRowDoubleClick,\n    onRowContextMenu,\n    onRowDragStart,\n    className,\n    ...props\n  }: ListViewRowProps<R>,\n  ref?: React.Ref<HTMLDivElement>\n) {\n  const internalRef = useRef<HTMLDivElement>(null);\n  const refs = useMergeRefs(internalRef, ref);\n  const containerElement = useFocusContainer();\n  const renderers = useDefaultRenderers<R>();\n  const cellContainer = renderers.cellContainer ?? defaultCellContainer;\n  const cellRenderer = renderers.cell ?? defaultCellRenderer;\n\n  useLayoutEffect(() => {\n    if (shouldFocus) {\n      const { current } = internalRef;\n      if (current) {\n        current.scrollIntoView({ block: 'nearest' });\n        if (containerElement && containerElement.contains(document.activeElement)) {\n          current.focus({ preventScroll: true });\n        }\n      }\n    }\n  }, [containerElement, shouldFocus]);\n\n  const dataProps: Record<string, string | undefined> = {\n    ['data-is-odd']: rowIndex % 2 != 0 ? '' : undefined,\n    ['data-is-even']: rowIndex % 2 == 0 ? '' : undefined,\n    ['data-is-selected']: selected ? '' : undefined,\n  };\n\n  return (\n    <div\n      ref={refs}\n      role=\"row\"\n      aria-rowindex={rowIndex + 2}\n      aria-selected={selected}\n      className={clsx(\n        cssClassnames.listViewRow,\n        {\n          [cssClassnames.listViewRowSelected]: selected,\n          [cssClassnames.listViewRowFocused]: shouldFocus,\n        },\n        className\n      )}\n      tabIndex={canTabFocus ? 0 : -1}\n      style={{ gridRowStart }}\n      onFocus={(event) => onRowFocus?.(event, row)}\n      onMouseDown={(event) => onRowMouseDown?.(event, row)}\n      onMouseUp={(event) => onRowMouseUp?.(event, row)}\n      onClick={(event) => onRowClick?.(event, row)}\n      onDoubleClick={(event) => onRowDoubleClick?.(event, row)}\n      onContextMenu={(event) => onRowContextMenu?.(event, row)}\n      draggable={onRowDragStart ? true : undefined}\n      onDragStart={(event) => onRowDragStart?.(event, row)}\n      {...props}\n      {...dataProps}\n    >\n      {cellContainer({\n        columns,\n        row,\n        rowIndex,\n        focused: shouldFocus,\n        selected,\n        children: columns.map((col) =>\n          cellRenderer(col.key, {\n            column: col,\n            row,\n            rowFocused: shouldFocus,\n            rowSelected: selected,\n          })\n        ),\n      })}\n    </div>\n  );\n}\n\nexport const ListViewRow = memo(forwardRef(Row)) as <R>(\n  props: ListViewRowProps<R> & RefAttributes<HTMLDivElement>\n) => JSX.Element;\n\nexport function defaultRowRenderer<R>(key: React.Key, props: ListViewRowProps<R>) {\n  return <ListViewRow key={key} {...props} />;\n}\n\nexport type ListViewCellContainerProps<R> = React.PropsWithChildren<{\n  columns: CalculatedColumn<R>[];\n  row: R;\n  rowIndex: number;\n  focused?: boolean;\n  selected?: boolean;\n}>;\n\nfunction defaultCellContainer<R>({ children }: ListViewCellContainerProps<R>) {\n  return <>{children}</>;\n}\n","import {\n  forwardRef,\n  Key,\n  RefAttributes,\n  useCallback,\n  useImperativeHandle,\n  useLayoutEffect,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { useDebounce } from 'react-use';\nimport {\n  CalculatedColumn,\n  cssClassnames,\n  ListViewHandle,\n  ListViewProps,\n  SortColumn,\n} from './types';\nimport { getDefaultComparator, range } from './utils';\nimport { useDefaultRenderers } from './hooks/useDefaultRenderers';\nimport { useCalculatedColumns } from './hooks/useCalculatedColumns';\nimport { useViewportRows } from './hooks/useViewportRows';\nimport { useSelectedRows } from './hooks/useSelectedRows';\nimport { ColumnResizeProvider } from './hooks/useColumnResize';\nimport { HeaderHeightProvider } from './hooks/useHeaderHeight';\nimport { FocusContainerProvider } from './hooks/useFocusContainer';\nimport { RowSortProvider } from './hooks/useRowSort';\nimport { useRowKey } from './hooks/useRowKey';\nimport { defaultHeaderRowRenderer } from './ListViewHeaderRow';\nimport { defaultRowRenderer } from './ListViewRow';\nimport clsx from 'clsx';\n\nfunction ListView<R, K extends Key = Key>(\n  {\n    columns: rawColumns,\n    rows: rawRows,\n    rowHeight = 26,\n    noBorder,\n    defaultColumnOptions,\n    rowKey,\n    focusedRow: propFocusedRow,\n    onFocusedRowChange,\n    selectedRows: propSelectedRows,\n    onSelectedRowsChange,\n    sortColumn: propSortColumn,\n    onSortColumnChange,\n    onColumnResize,\n    onRowClick,\n    onRowDoubleClick,\n    onRowContextMenu,\n    onRowDragStart,\n    className,\n    style,\n    ...props\n  }: ListViewProps<R, K>,\n  refHandle: React.Ref<ListViewHandle>\n) {\n  const defaultRenderers = useDefaultRenderers<R>();\n  const headerRowRenderer = defaultRenderers.headerRow ?? defaultHeaderRowRenderer;\n  const rowContainer = defaultRenderers.rowContainer ?? defaultRowContainer;\n  const rowRenderer = defaultRenderers.row ?? defaultRowRenderer;\n  const noRowsFallback = defaultRenderers?.noRowsFallback;\n  const { columns, setColumnWidths, gridTemplateColumns } = useCalculatedColumns(\n    rawColumns,\n    defaultColumnOptions\n  );\n  const [sortColumn, setSortColumn] = useState<SortColumn | undefined>(propSortColumn);\n  const rows = useMemo((): readonly R[] => {\n    if (sortColumn === undefined) return rawRows;\n    const column = new Map(columns.map((col) => [col.key, col])).get(sortColumn.columnKey);\n    if (column === undefined) return rawRows;\n    return [...rawRows].sort((a, b) => {\n      const comparator = column.comparator ?? getDefaultComparator(column);\n      const result = comparator(a, b);\n      if (result !== 0) {\n        return sortColumn.direction === 'ASC' ? result : -result;\n      }\n      return 0;\n    });\n  }, [rawRows, columns, sortColumn]);\n  const { getByRow, getIndexByKey } = useRowKey(rows, rowKey);\n  const [focusedRow, setFocusedRow] = useState<K | undefined>(propFocusedRow);\n  const focusedRowIndex = getIndexByKey(focusedRow) ?? -1;\n  const [selectedRows, setSelectedRows] = useSelectedRows(propSelectedRows);\n  const [shiftKeyHeldRow, setShiftKeyHeldRow] = useState<K | undefined>();\n  const [headerHeight, setHeaderHeight] = useState(0);\n  const ref = useRef<HTMLDivElement>(null);\n  const [refs, viewportHeight, viewportRows] = useViewportRows(\n    ref,\n    rows,\n    rowHeight,\n    headerHeight,\n    focusedRowIndex\n  );\n\n  useImperativeHandle(\n    refHandle,\n    () => ({\n      element: ref.current,\n      scrollToRow: (rowIndex: number) => {\n        if (rowIndex >= 0 && rowIndex <= rows.length - 1) {\n          setFocusedRow(getByRow(rows[rowIndex]));\n        }\n      },\n    }),\n    [ref, rows, getByRow]\n  );\n  useDebounce(() => onFocusedRowChange?.(focusedRow), 50, [focusedRow]);\n  useDebounce(() => onSelectedRowsChange?.(selectedRows), 50, [selectedRows]);\n\n  useLayoutEffect(() => {\n    if (focusedRow && focusedRowIndex < 0) {\n      setFocusedRow(undefined);\n    }\n  }, [focusedRow, focusedRowIndex]);\n  // useLayoutEffect(() => setFocusedRow(undefined), [rows]);\n  useLayoutEffect(() => setFocusedRow(propFocusedRow), [propFocusedRow]);\n  useLayoutEffect(() => setSortColumn(propSortColumn), [propSortColumn]);\n  useLayoutEffect(() => setShiftKeyHeldRow(undefined), [rows]);\n\n  const [columnResizeEventArgs, setColumnResizeEventArgs] =\n    useState<[CalculatedColumn<R>, number]>();\n  const handleColumnResize = useCallback(\n    (column: CalculatedColumn<R>, width: number) => {\n      setColumnWidths(column.key, width);\n      setColumnResizeEventArgs([column, width]);\n    },\n    [setColumnWidths]\n  );\n  useDebounce(() => columnResizeEventArgs && onColumnResize?.(...columnResizeEventArgs), 500, [\n    columnResizeEventArgs,\n  ]);\n\n  function handleKeyDown(event: React.KeyboardEvent<HTMLDivElement>) {\n    const { key, code, shiftKey, ctrlKey } = event;\n    if (ctrlKey && code == 'KeyA') {\n      event.preventDefault();\n      setSelectedRows(rows.map(getByRow));\n    } else if (code === 'Space') {\n      event.preventDefault(); // Spaceキー押下によるスクロール動作を無効化\n      if (focusedRow !== undefined) {\n        const selected = new Set(selectedRows);\n        if (selected.has(focusedRow) && ctrlKey) {\n          selected.delete(focusedRow);\n        } else {\n          selected.add(focusedRow);\n        }\n        setSelectedRows(Array.from(selected));\n        setShiftKeyHeldRow(focusedRow);\n      }\n    } else {\n      const getClampedNext = (index: number) => {\n        function clamp(i: number) {\n          return Math.min(Math.max(i, 0), rows.length - 1);\n        }\n        switch (key) {\n          case 'ArrowUp':\n            return clamp(index - 1);\n          case 'ArrowDown':\n            return clamp(index + 1);\n          case 'Home':\n            return 0;\n          case 'End':\n            return rows.length - 1;\n          case 'PageUp': {\n            const nextRowY = index * rowHeight + rowHeight - viewportHeight;\n            return clamp(Math.floor(nextRowY / rowHeight));\n          }\n          case 'PageDown': {\n            const nextRowY = index * rowHeight + viewportHeight;\n            return clamp(Math.floor(nextRowY / rowHeight));\n          }\n          default:\n            return false;\n        }\n      };\n      // ctrlKey + PageUp/PageDown はブラウザのタブ切り替えのショートカットのためアプリケーションではハンドルできない\n      const rowIndex = getClampedNext(focusedRowIndex);\n      if (rowIndex !== false && rowIndex != focusedRowIndex) {\n        event.preventDefault();\n        const rowKey = getByRow(rows[rowIndex]);\n        setFocusedRow(rowKey);\n        if (shiftKey) {\n          const selected = range(getIndexByKey(shiftKeyHeldRow) ?? 0, rowIndex).map((i) =>\n            getByRow(rows[i])\n          );\n          setSelectedRows(selected, ctrlKey);\n        } else if (!ctrlKey) {\n          setSelectedRows([rowKey]);\n          setShiftKeyHeldRow(rowKey);\n        }\n      }\n    }\n  }\n\n  const handleRowFocus = useCallback(\n    (event: React.FocusEvent, row: R) => {\n      setFocusedRow(getByRow(row));\n    },\n    [getByRow]\n  );\n\n  const handleRowMouseDown = useCallback(\n    (event: React.MouseEvent, row: R) => {\n      const { shiftKey, ctrlKey } = event;\n      if (!shiftKey && !ctrlKey) {\n        const rowKey = getByRow(row);\n        if (!new Set(selectedRows).has(rowKey)) {\n          setSelectedRows([rowKey]);\n          setShiftKeyHeldRow(rowKey);\n        }\n      }\n    },\n    [getByRow, selectedRows, setSelectedRows]\n  );\n\n  const handleRowMouseUp = useCallback(\n    (event: React.MouseEvent, row: R) => {\n      const { button, shiftKey, ctrlKey } = event;\n      // 0: left button, 1: wheel button, 2: right button\n      if (button !== 2) {\n        if (shiftKey) {\n          const rowIndex = rows.indexOf(row);\n          const selected = range(getIndexByKey(shiftKeyHeldRow) ?? 0, rowIndex).map((i) =>\n            getByRow(rows[i])\n          );\n          setSelectedRows(selected, ctrlKey);\n        } else {\n          const rowKey = getByRow(row);\n          const selected = new Set(selectedRows);\n          if (ctrlKey) {\n            if (selected.has(rowKey)) {\n              selected.delete(rowKey);\n            } else {\n              selected.add(rowKey);\n            }\n            setSelectedRows(Array.from(selected));\n          } else if (selected.size > 1 || !selected.has(rowKey)) {\n            setSelectedRows([rowKey]);\n          }\n          setShiftKeyHeldRow(rowKey);\n        }\n      }\n    },\n    [getByRow, getIndexByKey, rows, selectedRows, setSelectedRows, shiftKeyHeldRow]\n  );\n\n  const layoutCssVars: Record<string, string> = {\n    '--relv-line-height': `${rowHeight}px`,\n    '--relv-header-height': `${headerHeight}px`,\n    '--relv-grid-template-columns': gridTemplateColumns,\n  };\n  if (noBorder) {\n    layoutCssVars['--relv-border-width'] = 'none';\n  }\n  const rowGroupCss: Record<string, string> = {};\n  if (rows.length > 0) {\n    rowGroupCss['gridTemplateRows'] = `repeat(${rows.length || 1}, ${rowHeight}px)`;\n  }\n\n  const selectedSet = new Set(selectedRows);\n  const refContainer = useRef<HTMLDivElement>(null);\n\n  return (\n    <div\n      ref={refs}\n      role=\"table\"\n      aria-rowcount={rows.length + 1}\n      aria-multiselectable={true}\n      className={clsx(cssClassnames.listView, className)}\n      style={{\n        ...style,\n        ...layoutCssVars,\n      }}\n      {...props}\n    >\n      <RowSortProvider\n        value={{\n          sortColumn,\n          onSort: (sortColumn) => {\n            setSortColumn(sortColumn);\n            onSortColumnChange?.(sortColumn);\n          },\n        }}\n      >\n        <HeaderHeightProvider value={{ onHeaderHeightResize: setHeaderHeight }}>\n          <ColumnResizeProvider value={{ onColumnResize: handleColumnResize }}>\n            <div role=\"rowgroup\" className={cssClassnames.listViewHeader}>\n              {headerRowRenderer({ columns })}\n            </div>\n          </ColumnResizeProvider>\n        </HeaderHeightProvider>\n      </RowSortProvider>\n      <div\n        ref={refContainer}\n        role=\"rowgroup\"\n        className={cssClassnames.listViewBody}\n        style={rowGroupCss}\n        onKeyDown={handleKeyDown}\n      >\n        <FocusContainerProvider value={refContainer.current}>\n          {rowContainer({\n            rows,\n            children:\n              rows.length === 0\n                ? noRowsFallback\n                : viewportRows\n                    .map((i) => ({ rowIndex: i, row: rows[i], rowKey: getByRow(rows[i]) }))\n                    .map(({ rowIndex, row, rowKey }) =>\n                      rowRenderer(rowKey, {\n                        columns,\n                        row,\n                        rowIndex,\n                        gridRowStart: rowIndex + 1,\n                        canTabFocus:\n                          focusedRow !== undefined ? focusedRow === rowKey : rowIndex == 0,\n                        shouldFocus: focusedRow !== undefined ? focusedRow === rowKey : false,\n                        selected: selectedSet.has(rowKey),\n                        onRowFocus: handleRowFocus,\n                        onRowMouseDown: handleRowMouseDown,\n                        onRowMouseUp: handleRowMouseUp,\n                        onRowClick: onRowClick,\n                        onRowDoubleClick: onRowDoubleClick,\n                        onRowContextMenu: onRowContextMenu,\n                        onRowDragStart: onRowDragStart,\n                      })\n                    ),\n          })}\n        </FocusContainerProvider>\n      </div>\n    </div>\n  );\n}\n\nexport default forwardRef(ListView) as <R, K extends Key = Key>(\n  props: ListViewProps<R, K> & RefAttributes<ListViewHandle>\n) => JSX.Element;\n\nexport type ListViewRowContainerProps<R> = React.PropsWithChildren<{\n  rows: readonly R[];\n}>;\n\nfunction defaultRowContainer<R>({ children }: ListViewRowContainerProps<R>) {\n  return <>{children}</>;\n}\n"],"names":["index","Context","createContext","useContext","useMemo","useMap","width","useLayoutEffect","useScroll","useMeasure","useState","useCallback","merge","rows","useRef","column","jsxs","jsx","memo","forwardRef","row","Fragment","clsx","useImperativeHandle","useDebounce","rowKey","sortColumn"],"mappings":"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"}